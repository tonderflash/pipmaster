/**
 * WhatsApp Bot con Baileys
 * Archivo principal de la aplicaci√≥n
 */
import { logger } from './services/whatsapp/baileys.config.js';
import whatsappService from './services/whatsapp/index.js';

/**
 * Inicializa la aplicaci√≥n
 */
async function init() {
  try {
    logger.info('üöÄ Iniciando aplicaci√≥n...');
    
    // Inicializar servicio de WhatsApp (incluye autenticaci√≥n y conexi√≥n)
    logger.info('üì± Inicializando servicio de WhatsApp...');
    await whatsappService.initialize();
    
    logger.info('‚úÖ Servicio de WhatsApp inicializado correctamente');
    logger.info('ü§ñ Bot en ejecuci√≥n. Presiona Ctrl+C para detener.');
    logger.info('üîî Escanea el c√≥digo QR cuando aparezca en la terminal.');
  } catch (error) {
    logger.fatal({ error }, 'Error cr√≠tico en la aplicaci√≥n');
    process.exit(1);
  }
}

// Manejo de se√±ales de terminaci√≥n
const handleShutdown = async (signal) => {
  logger.info(`Recibida se√±al ${signal}. Cerrando la aplicaci√≥n...`);
  process.exit(0);
};

// Manejadores de eventos de terminaci√≥n
['SIGINT', 'SIGTERM', 'SIGQUIT'].forEach(signal => {
  process.on(signal, () => handleShutdown(signal));
});

// Manejo de errores no capturados
process.on('unhandledRejection', (reason, promise) => {
  logger.error({ reason, promise }, 'Unhandled Rejection');
});

process.on('uncaughtException', (error) => {
  logger.fatal({ error }, 'Uncaught Exception');
  process.exit(1);
});

// Iniciar la aplicaci√≥n
init().catch(error => {
  logger.fatal({ error }, 'Error al iniciar la aplicaci√≥n');
  process.exit(1);
});
